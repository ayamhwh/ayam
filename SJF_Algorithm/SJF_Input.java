
package SJF_Algorithm;

import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class SJF_Input extends javax.swing.JFrame {

    DefaultTableModel model = new DefaultTableModel();

    int rowCount = 1;
   
    
    public SJF_Input() {
        initComponents();
        
        model = (DefaultTableModel) Table.getModel();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        AddProcess = new javax.swing.JButton();
        DeleteProcess = new javax.swing.JButton();
        enter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 30)); // NOI18N
        jLabel1.setText("Shortest Job First");

        Table.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"P1", null, null}
            },
            new String [] {
                "PROCESS", "ARRIVAL TIME", "BURST TIME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Table);

        AddProcess.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        AddProcess.setText("ADD PROCESS");
        AddProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddProcessActionPerformed(evt);
            }
        });

        DeleteProcess.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        DeleteProcess.setText("DELETE PROCESS");
        DeleteProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteProcessActionPerformed(evt);
            }
        });

        enter.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        enter.setText("ENTER");
        enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(AddProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(DeleteProcess)
                .addGap(122, 122, 122)
                .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(105, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(307, 307, 307))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(102, 102, 102))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void AddProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddProcessActionPerformed
                
        if (rowCount < 6) {
            
      model.addRow(new Object[]{"P" +(1 + rowCount), "",""});
      rowCount++;
      //a button to add a process

        }
    }//GEN-LAST:event_AddProcessActionPerformed

    private void DeleteProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteProcessActionPerformed
        
        if (rowCount >1){
       
        model.setRowCount(model.getRowCount() - 1);
        rowCount--;
        //a button to delete the lastest process
        
        }
    }//GEN-LAST:event_DeleteProcessActionPerformed

    
    private void enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterActionPerformed
       
        try {
            
        int numcolumn = model.getColumnCount();
        int numrow = model.getRowCount();
        
        Object[][] tableData = new Object[numrow][numcolumn];
        //array to store the value on the table
        
       for (int row = 0; row < numrow; row++) {
          for (int col = 0; col < numcolumn; col++) {
              
              
                 tableData[row][col] = model.getValueAt(row, col);
                 // getting the value from the table and storing in this array

                  if (tableData[row][col] == null)  {
                JOptionPane.showMessageDialog(this, "Please complete all the values in the table.", "Incomplete Data",JOptionPane.WARNING_MESSAGE);
                return;
                // display a message that if one array is empty, it will not continue the action
        
                  }
          }
       }
       
                 Arrays.sort(tableData, (row1, row2) -> {
                 Integer value1 = Integer.parseInt(row1[1].toString());
                 Integer value2 = Integer.parseInt(row2[1].toString());
                 return value1.compareTo(value2);
                 });
                 //sorting the array to an ascending order base on the arrival time(2nd column)

                 
                 Arrays.sort(tableData, 1, tableData.length, (row1, row2) -> {
                     Integer value1 = Integer.parseInt(row1[2].toString());
                     Integer value2 = Integer.parseInt(row2[2].toString());
                     return value1.compareTo(value2);
                 });     
                 //sorting the array to an ascending order base on the burst time(3nd column)
                 //the block also state that the sorting start from the index 1(2nd element) on the row

         
        SJF_GanttChart SJF_GanttChart = new SJF_GanttChart(numrow, tableData, numcolumn);
        SJF_GanttChart.setVisible(true);
        dispose();
        // calling the Gantt chart frame
        
    } 
        catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "ERROR", "ERROR", JOptionPane.WARNING_MESSAGE);
               
    }
    }//GEN-LAST:event_enterActionPerformed
 
   /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SJF_Input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SJF_Input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SJF_Input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SJF_Input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 new SJF_Input().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddProcess;
    private javax.swing.JButton DeleteProcess;
    private javax.swing.JTable Table;
    private javax.swing.JButton enter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
